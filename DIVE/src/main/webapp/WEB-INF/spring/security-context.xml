<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 핸들러를 bean으로 등록 -->
	<bean id="UserAccessDenied"
		class="kr.jungang.dive.security.UserAccessDeniedHandler"></bean>
	<bean id="UserLoginSuccess"
		class="kr.jungang.dive.security.UserLoginSuccessHandler"></bean>
	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="ForUserDetailsService"
		class="kr.jungang.dive.security.ForUserDetailsService"></bean>

	<security:http>
		<!-- 해당 url 접속 시도 시 access 권한 확인 -->
		<security:intercept-url pattern="/user/memberPage"
			access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/user/adminPage"
			access="hasRole('ROLE_ADMIN')" />

		<!-- 권한 없으면 로그인 페이지로 이동, success시 bean id를 사용해 핸들러 작동-->
		<security:form-login login-page="/user/userLogin"
			authentication-success-handler-ref="UserLoginSuccess" />
 		
		<!-- bean id를 사용해 access dinied 핸들러 작동 -->
		<security:access-denied-handler
			ref="UserAccessDenied" />

		<!-- 로그아웃  시 쿠키 삭제 -->
		<security:logout logout-url="/user/userLogout"
			invalidate-session="true" delete-cookies="remember-me, JSESSION_ID" />
			
		<!-- 자동 로그인 설정 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
		
	</security:http>

	<security:authentication-manager>
		<!-- userMapper의 instance를 주입받아 실제 기능 구현(의존성 주입) -->
		<security:authentication-provider
			user-service-ref="ForUserDetailsService">

			<!-- PasswordEncoder -->
			<security:password-encoder
				ref="bcryptPasswordEncoder" />
			<!-- /*Test하기 위해 InMemoryUserDetailsmanager를 이용*/ <security:user-service> 
				/*PasswordEncoder 임시로 사용하지 않으려면 password 앞에 {noop}을 추가*/ <security:user name="member" 
				password="{noop}member" authorities="ROLE_MEMBER" /> <security:user name="admin" 
				password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN" /> </security:user-service> -->
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
